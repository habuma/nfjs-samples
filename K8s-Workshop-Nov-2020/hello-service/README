# For those of you who were in my Spring-Kubernetes workshop on 11/17/2020...

 - Believe it or not, 5 minutes after everyone dropped off the call, I simply shutdown my deployment and ran Skaffold again. Everything worked as expected! No code changes...it just worked. ¯\_(ツ)_/¯
 - I went ahead and added the config and @RefreshScope to show how changing the ConfigMap while the app is running results in the property being changed on the fly. See below for details on how that should work.
 - What I was unable to show (because of the "presentation-time bug") is...

   - With Spring Cloud Kubernetes in play, "kubernetes" is an active profile for Spring. You can see this in the first couple of lines of the application's log file (watching it via Stern, for instance) or by making a request to the Actuator's `/env` endpoint.
   - You can also see that the ConfigMap's `greeting.message` property is reflected in the `/hello` endpoint, but also you'll see it near the top of the results from the Actuator's `/env` endpoint.
   - If you make a request to `/goodbye`, it will publish a Spring event (internal to the Spring container) to indicate that liveness is broken. Keep an eye on the `kubectl get all` response (easier if you're using `watch`) and after awhile you'll see the application restart. It's even easier to see it restart using Stern to watch the logs. What's happening is that Kubernetes detects, via the `/actuator/health/liveness` endpoint, that the application is broken. So it restarts the app to get it back to a happy state.

One other thing I didn't show you is Dive. I type `dive habuma/hello-service` (adjust for your image's name) and you get a terminal-window UI that shows the list of layers on the left side and the contents of the image with the parts each layer contributes on the right side. It's a VERY cumbersome interface, but the following instructions should be helpful...

 - Using the arrow keys, move down in the layers list to the 3rd entry from the bottom. For my image, it's the one that is 38MB. This is the layer where the Boot application code lives.
 - Press TAB to move focus to the right-hand list.
 - Press CTRL-Space to collapse the list of files/folders in the right-hand list.
 - Near/at the bottom, will be a folder named "workspace". It's probably highlighted in green, indicating that this layer contributed that folder. (Yellow would mean that it changed it somehow; Red would mean that it deleted it).
 - Arrow-down to "workspace", then right-arrow to expand that folder. You should see what were the contents of the Boot application's JAR file. It's expanded when the image is created, though, because it's more efficient to run it from an exploded folder than from a JAR.
 - Navigate around in there and you'll find pretty much everything that would've been in the Boot application's executable JAR file. Under "BOOT-INF/lib", you'll find all dependency libraries and under "BOOT-INF/classes" you'll find your application classes and configuration (application.yml).
 - Feel free to navigate in other layers (TAB to get back to the list on the left) to see what each layer brings to the image.

Again, thank you very much for attending the workshop. Despite some hiccups and time constraints at the end, I think it went very smoothly and it was a pleasure to spend time with you talking Spring and Kubernetes today. Ping me on email or Twitter if you have any questions.

# For those of you who didn't attend my workshop, but stumbled across this stuff...

Well, I sure wish you'd have attended. :)

But, for now these are all of the instructions I'm giving. Later, when time and inspiration allow, I'll update this README with more details on how to run this for yourself. In short, however...

 - I created a cluster in Kind (Kubernetes in Docker)
 - I ran `skaffold dev` using the skaffold.yaml file in this project.
 - I manually applied (although I guess I could've done this in Skaffold) the rbac.yaml and configmap.yaml using `kubectl apply -f`
 - I created a port-forward for the pod (e.g., `kubectl port-forward {pod name} 8080:8080`)
 - I using curl to get a "Hello message": `curl localhost:8080/hello`
 - If all is working, it should say "Hello Kubernetes!". If it says "Hello world!" instead, then that's either because you didn't create the ConfigMap or because you didn't apply the rbac.yaml file which allows Spring Cloud Kubernetes to access ConfigMap details.
